version: 2.1
orbs:
  slack: circleci/slack@4.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      id: 
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.id >>" 
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.id >>" 
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  revert_migrations: 
    description: reverting the migrations 
    steps: 
      - run: 
          name: revert migrations
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/RYhZndN2VTAstJhirw7SUS/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
          when: on_fail

   

jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail
          channel: '#general'

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test  
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"    
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ~/project/.circleci/ansible/
          command: |
            # aws ec2 describe-instances \
            #   --query "Reservations[*].Instances[*].PublicIpAddress" \    
            #   --filters "Name=tag:project,Values=udapeople"  
            #   #--output text  >> inventory.txt   
            aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text  >> inventory.txt            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  
      - destroy_environment: 
          id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["cc:45:dc:87:da:2d:be:d3:e5:75:3c:22:2e:14:2b:b1"]
      - attach_workspace:
          # at: ~/project/.circleci/ansible/
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure  
      - destroy_environment: 
          id: ${CIRCLE_WORKFLOW_ID:0:7}   
  run-migrations:
    docker:
       - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                  # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                  # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                  # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/RYhZndN2VTAstJhirw7SUS/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy_environment: 
          id: ${CIRCLE_WORKFLOW_ID:0:7}    
  
  deploy-frontend:
    # docker:
    #   - image: amazon/aws-cli
    # steps:
    #   # Checkout code from git
    #   - checkout 
    #   - run:
    #       name: Install tar utility
    #       command: |
    #         yum install -y tar gzip
    #   - attach_workspace:
    #       at: ~/
    #   - run:
    #       name: Install dependencies
    #       command: |
    #         # your code here
    #         apt add --update ansible 
    #         apt add --update awscli
    #         # apt-get update && apt-get install -y ansible
    docker:
      - image: cimg/python:3.10.5-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cc:45:dc:87:da:2d:be:d3:e5:75:3c:22:2e:14:2b:b1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            pip install ansible
      - run:
          name: Install AWS CLI
          command: |
            pip --no-cache-dir install --upgrade awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$( aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text )
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure   
      - destroy_environment: 
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations

  deploy-backend:
    docker:
      - image: cimg/python:3.10.5-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cc:45:dc:87:da:2d:be:d3:e5:75:3c:22:2e:14:2b:b1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            pip install ansible
      - run:
          name: Install AWS CLI
          command: |
            pip --no-cache-dir install --upgrade awscli
      - run: 
          name: Install dependencies
          command: |
            cd backend
            npm install
      # - run:
      #     name: Package backend
      #     command: |
      #       cd backend
      #       npm run build
      #       tar -czf artifact.tar.gz dist/* package*

      #       cd ..
      #       cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      # - run:
      #     name: Deploy backend
      #     command: |
      #       export TYPEORM_MIGRATIONS_DIR=./migrations
      #       export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
      #       export TYPEORM_MIGRATIONS=./migrations/*.ts

      #       cd .circleci/ansible
      #       cat inventory.txt
      #       ansible-playbook -i inventory.txt deploy-backend.yml
      - run:
          name: deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert_migrations
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker: 
      - image: cimg/python:3.10.5-node
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            pip --no-cache-dir install --upgrade awscli
      - run: 
          name: Backend SMoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicIp' )
            eval export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
    
            echo "here"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then 
              exit 1
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees" 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migrations
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: cimg/python:3.10.5
    steps:
      - checkout
      - run: 
          name: Install dependencies
          command: |
            pip --no-cache-dir install --upgrade awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - revert-migrations
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  cleanup:
    docker:
      - image: cimg/python:3.10.5
    steps:
      - checkout
      - run: 
          name: Install dependencies
          command: |
            pip --no-cache-dir install --upgrade awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text )
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"

            if [[ ${STACKS[@]} =~ ${OldWorkflowID} ]]
            then 
              echo CLEANUP SUCCESSFUL
              aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else 
              echo CLEANUP UNSUCCESSFUL
            fi




workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - notify:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: 
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires:
            - "smoke-test"
      - cleanup:
          requires:
            - cloudfront-update
